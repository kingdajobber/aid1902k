1. continue 和 break 有什么区别？
    continue和break都用在循环体中，
    前者跳出本次循环，不执行continue后面的代码，开始新一轮循环；
    后者直接跳出循环体，且不执行循环体else部分，直接执行循环体外之后的代码。



3. 对闭包的理解。
    一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，
    并且外函数的返回值是内函数的引用。这样就构成了一个闭包。调用外函数相当于执行了内函数的功能。
    外函数在结束的时候，返回内函数的同时，会把外函数的临时变量送给内函数绑定在一起。
    所以外函数已经结束了，调用内函数的时候仍然能够使用外函数的临时变量。
    主要用来作为装饰器和模仿面向对象编程

4. Python中引用、copy()、deepcopy()的区别：
    假设有列表对象a，如果对a的某个元素修改，再添加一个元素：
    引用(赋值)：b=a: 
    a怎么变化变化，b怎么变化，因为指向同一个对象
    浅层拷贝：c = copy.copy(a): 
    c元素个数不能改变，但元素内容跟着a变化
    深层拷贝: d = copy.deepcopy(a): 
    d元素个数和内容都不会随着a改变，因为已经指向另一个对象

5. Python垃圾回收机制
    为对象添加引用计数，如果失去引用对象则引用计数减少，如果引用计数为0则销毁对象，释放内存

6. 什么是lambda函数，它有什么好处？
    lambda是匿名函数，作为参数传递时，简洁灵活，可读性强。随时创建和销毁，减少程序耦合度。
    方法体只能有一条语句，且不支持赋值语句

7. 使用Python代码实现 list 列表元素去重
    方法a: list_result = list(set(list))
    方法b: list_result = [list[i] for i in range(len(list)-1) for m in range(i+1,len(list)) if list[i] != list[m]]

8. 同4

9. 介绍一下except的用法：
    用于异常处理机制，需要和 try 配对使用。
    如果try包含的语句发生异常，except可拦截异常并执行它所包含的语句。
    except 可拦截指定的异常，也可拦截所有异常(Exception)，如果没有异常没有被拦截到，程序会中断

10. Python如何生成随机数：
    导入模块： import random，使用random模块定义的方法生成随机数

11. 如何在function中设置全局变量？
    在function中使用 global 关键字声明变量

12. 几种引号的区别：
    单引号和双引号没有区别，但是单引号只能和单引号配对，双引号只能和双引号配对，不能混配。
    单引号对和双引号对可互相嵌套使用。
    三引号可作为多行注释，也可输出带格式的字符串（所见即所得）

13. f(2) = [0, 1] / f(3,[3,2,1]) = [3, 2, 1, 0, 1, 4] / f(3) = [0, 1, 0, 1, 4]

14. *args 元组形参，可搜集所有的位置传参
    **kwargs 双星号字典形参，可搜集所有的关键字传参
    当函数的参数不确定时，可以使用此策略进行传参。

15. 同5

16. 简述函数式编程
    -- 函数可以赋值给变量，赋值后变量绑定函数。
    -- 允许将函数作为参数传入另一个函数。将核心逻辑传入方法体，使该方法的适用性更广，体现了面向对象的开闭原则。
    -- 允许函数返回一个函数。

17. 什么是匿名函数，有什么局限性？
    匿名函数即无需定义方法名称的函数，返回值即表达式结果。如lambda函数
    方法体只能有一条语句，且不支持赋值语句

18. 如何捕获异常，常见异常机制有哪些?
    使用 try + except 配合捕获异常。
    常见异常有：ValueError, NotImplementError, ImportError 等

19. 同7

20. Python中list 和 tuple 区别是什么？
    list是可变的序列容器，初始化时会有一定的内存空间预留
    可对列表元素进行增删等操作
    tuple是不可变的序列容器，无法对元素进行增删操作

21. 代码举例说明什么是decorator
    def decorator(func):
        def wrapper(*args,**kwargs):
            # 需要增加的功能
            print(func.__name__)
            # 传入的功能
            return func(*args,**kwargs)
        return wrapper


    
